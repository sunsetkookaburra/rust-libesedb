/* automatically generated by rust-bindgen 0.68.1 */

pub const LIBESEDB_HAVE_MULTI_THREAD_SUPPORT: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const HAVE_SIZE32_T: u32 = 1;
pub const HAVE_SSIZE32_T: u32 = 1;
pub const HAVE_SIZE64_T: u32 = 1;
pub const HAVE_SSIZE64_T: u32 = 1;
pub const HAVE_OFF64_T: u32 = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const _UPPER: u32 = 1;
pub const _LOWER: u32 = 2;
pub const _DIGIT: u32 = 4;
pub const _SPACE: u32 = 8;
pub const _PUNCT: u32 = 16;
pub const _CONTROL: u32 = 32;
pub const _BLANK: u32 = 64;
pub const _HEX: u32 = 128;
pub const _LEADBYTE: u32 = 32768;
pub const _ALPHA: u32 = 259;
pub const _SH_DENYRW: u32 = 16;
pub const _SH_DENYWR: u32 = 32;
pub const _SH_DENYRD: u32 = 48;
pub const _SH_DENYNO: u32 = 64;
pub const _SH_SECURE: u32 = 128;
pub const SH_DENYRW: u32 = 16;
pub const SH_DENYWR: u32 = 32;
pub const SH_DENYRD: u32 = 48;
pub const SH_DENYNO: u32 = 64;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const _S_IFMT: u32 = 61440;
pub const _S_IFDIR: u32 = 16384;
pub const _S_IFCHR: u32 = 8192;
pub const _S_IFIFO: u32 = 4096;
pub const _S_IFREG: u32 = 32768;
pub const _S_IREAD: u32 = 256;
pub const _S_IWRITE: u32 = 128;
pub const _S_IEXEC: u32 = 64;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFREG: u32 = 32768;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const LIBESEDB_VERSION: u32 = 20230824;
pub const LIBESEDB_VERSION_STRING: &[u8; 9] = b"20230824\0";
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type size32_t = u32;
pub type ssize32_t = i32;
pub type size64_t = u64;
pub type ssize64_t = i64;
pub type off64_t = i64;
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _cgetws_s(_Buffer: *mut wchar_t, _BufferCount: usize, _SizeRead: *mut usize) -> errno_t;
}
extern "C" {
    pub fn _cputws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getwch() -> wint_t;
}
extern "C" {
    pub fn _getwche() -> wint_t;
}
extern "C" {
    pub fn _putwch(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _ungetwch(_Character: wint_t) -> wint_t;
}
extern "C" {
    pub fn _getwch_nolock() -> wint_t;
}
extern "C" {
    pub fn _getwche_nolock() -> wint_t;
}
extern "C" {
    pub fn _putwch_nolock(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _ungetwch_nolock(_Character: wint_t) -> wint_t;
}
extern "C" {
    pub fn __conio_common_vcwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __pctype_func() -> *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __pwctype_func() -> *const wctype_t;
}
extern "C" {
    pub fn iswalnum(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswascii(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iswcsymf(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iswcsym(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswalnum_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswalpha_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswblank_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcntrl_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswgraph_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswlower_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswprint_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswpunct_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswspace_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswupper_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswxdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcsymf_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcsym_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn towupper(_C: wint_t) -> wint_t;
}
extern "C" {
    pub fn towlower(_C: wint_t) -> wint_t;
}
extern "C" {
    pub fn iswctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _towupper_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
    pub fn _towlower_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
    pub fn _iswctype_l(_C: wint_t, _Type: wctype_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isleadbyte(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isleadbyte_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_wctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wgetcwd(_DstBuf: *mut wchar_t, _SizeInWords: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetdcwd(
        _Drive: ::std::os::raw::c_int,
        _DstBuf: *mut wchar_t,
        _SizeInWords: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wchdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wmkdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wrmdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
pub type _fsize_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: _fsize_t,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata32_t() {
    const UNINIT: ::std::mem::MaybeUninit<_wfinddata32_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_wfinddata32_t>(),
        540usize,
        concat!("Size of: ", stringify!(_wfinddata32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_wfinddata32_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_create) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_access) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_write) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata32i64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata32i64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_wfinddata32i64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_wfinddata32i64_t>(),
        544usize,
        concat!("Size of: ", stringify!(_wfinddata32i64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata32i64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_wfinddata32i64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_create) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_access) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_write) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata64i32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: _fsize_t,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata64i32_t() {
    const UNINIT: ::std::mem::MaybeUninit<_wfinddata64i32_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_wfinddata64i32_t>(),
        560usize,
        concat!("Size of: ", stringify!(_wfinddata64i32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata64i32_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_wfinddata64i32_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_create) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_access) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_write) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_wfinddata64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_wfinddata64_t>(),
        560usize,
        concat!("Size of: ", stringify!(_wfinddata64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_wfinddata64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_create) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_access) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_write) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    pub fn _waccess(
        _FileName: *const wchar_t,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _waccess_s(_FileName: *const wchar_t, _AccessMode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _wchmod(
        _FileName: *const wchar_t,
        _Mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcreat(
        _FileName: *const wchar_t,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindfirst32(_FileName: *const wchar_t, _FindData: *mut _wfinddata32_t) -> isize;
}
extern "C" {
    pub fn _wfindnext32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wunlink(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wrename(
        _OldFileName: *const wchar_t,
        _NewFileName: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wmktemp_s(_TemplateName: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wmktemp(_TemplateName: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wfindfirst32i64(_FileName: *const wchar_t, _FindData: *mut _wfinddata32i64_t) -> isize;
}
extern "C" {
    pub fn _wfindfirst64i32(_FileName: *const wchar_t, _FindData: *mut _wfinddata64i32_t) -> isize;
}
extern "C" {
    pub fn _wfindfirst64(_FileName: *const wchar_t, _FindData: *mut _wfinddata64_t) -> isize;
}
extern "C" {
    pub fn _wfindnext32i64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32i64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindnext64i32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64i32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindnext64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wsopen_s(
        _FileHandle: *mut ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        _PermissionFlag: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsopen_dispatch(
        _FileName: *const wchar_t,
        _OFlag: ::std::os::raw::c_int,
        _ShFlag: ::std::os::raw::c_int,
        _PMode: ::std::os::raw::c_int,
        _PFileHandle: *mut ::std::os::raw::c_int,
        _BSecure: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wopen(
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wsopen(
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wexecl(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexecle(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexeclp(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexeclpe(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexecv(_FileName: *const wchar_t, _ArgList: *const *const wchar_t) -> isize;
}
extern "C" {
    pub fn _wexecve(
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wexecvp(_FileName: *const wchar_t, _ArgList: *const *const wchar_t) -> isize;
}
extern "C" {
    pub fn _wexecvpe(
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnl(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnle(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnv(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnve(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    const UNINIT: ::std::mem::MaybeUninit<_iobuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Placeholder) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: usize,
        _Dir: *mut wchar_t,
        _DirCount: usize,
        _Filename: *mut wchar_t,
        _FilenameCount: usize,
        _Ext: *mut wchar_t,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcslen(_String: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: usize,
        _Value: wchar_t,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: usize, _Value: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(_Destination: *mut wchar_t, _Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        36usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
}
extern "C" {
    pub fn _wasctime(_Tm: *const tm) -> *mut wchar_t;
}
extern "C" {
    pub fn _wasctime_s(_Buffer: *mut wchar_t, _SizeInWords: usize, _Tm: *const tm) -> errno_t;
}
extern "C" {
    pub fn wcsftime(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Format: *const wchar_t,
        _Tm: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn _wcsftime_l(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Format: *const wchar_t,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _wctime32(_Time: *const __time32_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime32_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctime64(_Time: *const __time64_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime64_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wstrdate_s(_Buffer: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wstrdate(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wstrtime_s(_Buffer: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wstrtime(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
pub type _ino_t = ::std::os::raw::c_ushort;
pub type ino_t = _ino_t;
pub type _dev_t = ::std::os::raw::c_uint;
pub type dev_t = _dev_t;
pub type _off_t = ::std::os::raw::c_long;
pub type off_t = _off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat32 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: __time32_t,
    pub st_mtime: __time32_t,
    pub st_ctime: __time32_t,
}
#[test]
fn bindgen_test_layout__stat32() {
    const UNINIT: ::std::mem::MaybeUninit<_stat32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_stat32>(),
        36usize,
        concat!("Size of: ", stringify!(_stat32))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat32>(),
        4usize,
        concat!("Alignment of ", stringify!(_stat32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtime) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat32i64 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: ::std::os::raw::c_longlong,
    pub st_atime: __time32_t,
    pub st_mtime: __time32_t,
    pub st_ctime: __time32_t,
}
#[test]
fn bindgen_test_layout__stat32i64() {
    const UNINIT: ::std::mem::MaybeUninit<_stat32i64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_stat32i64>(),
        48usize,
        concat!("Size of: ", stringify!(_stat32i64))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat32i64>(),
        8usize,
        concat!("Alignment of ", stringify!(_stat32i64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtime) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat64i32 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: __time64_t,
    pub st_mtime: __time64_t,
    pub st_ctime: __time64_t,
}
#[test]
fn bindgen_test_layout__stat64i32() {
    const UNINIT: ::std::mem::MaybeUninit<_stat64i32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_stat64i32>(),
        48usize,
        concat!("Size of: ", stringify!(_stat64i32))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat64i32>(),
        8usize,
        concat!("Alignment of ", stringify!(_stat64i32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat64 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: ::std::os::raw::c_longlong,
    pub st_atime: __time64_t,
    pub st_mtime: __time64_t,
    pub st_ctime: __time64_t,
}
#[test]
fn bindgen_test_layout__stat64() {
    const UNINIT: ::std::mem::MaybeUninit<_stat64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_stat64>(),
        56usize,
        concat!("Size of: ", stringify!(_stat64))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat64>(),
        8usize,
        concat!("Alignment of ", stringify!(_stat64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctime) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: time_t,
    pub st_mtime: time_t,
    pub st_ctime: time_t,
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        48usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctime)
        )
    );
}
extern "C" {
    pub fn _fstat32(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat32i64(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat32i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat64i32(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat64i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat64(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat32(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat32i64(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat32i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat64i32(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat64i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat64(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat32(_FileName: *const wchar_t, _Stat: *mut _stat32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat32i64(_FileName: *const wchar_t, _Stat: *mut _stat32i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat64i32(_FileName: *const wchar_t, _Stat: *mut _stat64i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat64(_FileName: *const wchar_t, _Stat: *mut _stat64) -> ::std::os::raw::c_int;
}
pub type _Wint_t = wchar_t;
extern "C" {
    pub fn _wsetlocale(_Category: ::std::os::raw::c_int, _Locale: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcreate_locale(_Category: ::std::os::raw::c_int, _Locale: *const wchar_t) -> _locale_t;
}
extern "C" {
    pub fn btowc(_Ch: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn mbrlen(
        _Ch: *const ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbrtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsrtowcs_s(
        _Retval: *mut usize,
        _Dst: *mut wchar_t,
        _Size: usize,
        _PSrc: *mut *const ::std::os::raw::c_char,
        _N: usize,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbsrtowcs(
        _Dest: *mut wchar_t,
        _PSrc: *mut *const ::std::os::raw::c_char,
        _Count: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcrtomb_s(
        _Retval: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Ch: wchar_t,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcrtomb(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: wchar_t,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs_s(
        _Retval: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Src: *mut *const wchar_t,
        _Size: usize,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsrtombs(
        _Dest: *mut ::std::os::raw::c_char,
        _PSource: *mut *const wchar_t,
        _Count: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wctob(_WCh: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy_s(_S1: *mut wchar_t, _N1: rsize_t, _S2: *const wchar_t, _N: rsize_t) -> errno_t;
}
extern "C" {
    pub fn wmemmove_s(_S1: *mut wchar_t, _N1: rsize_t, _S2: *const wchar_t, _N: rsize_t)
        -> errno_t;
}
#[doc = " The following type definitions hide internal data structures"]
pub type libesedb_column_t = isize;
pub type libesedb_file_t = isize;
pub type libesedb_index_t = isize;
pub type libesedb_long_value_t = isize;
pub type libesedb_multi_value_t = isize;
pub type libesedb_record_t = isize;
pub type libesedb_table_t = isize;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ASCII: LIBESEDB_CODEPAGES = 20127;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_1: LIBESEDB_CODEPAGES = 28591;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_2: LIBESEDB_CODEPAGES = 28592;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_3: LIBESEDB_CODEPAGES = 28593;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_4: LIBESEDB_CODEPAGES = 28594;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_5: LIBESEDB_CODEPAGES = 28595;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_6: LIBESEDB_CODEPAGES = 28596;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_7: LIBESEDB_CODEPAGES = 28597;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_8: LIBESEDB_CODEPAGES = 28598;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_9: LIBESEDB_CODEPAGES = 28599;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_10: LIBESEDB_CODEPAGES = 28600;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_11: LIBESEDB_CODEPAGES = 28601;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_13: LIBESEDB_CODEPAGES = 28603;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_14: LIBESEDB_CODEPAGES = 28604;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_15: LIBESEDB_CODEPAGES = 28605;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_ISO_8859_16: LIBESEDB_CODEPAGES = 28606;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_KOI8_R: LIBESEDB_CODEPAGES = 20866;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_KOI8_U: LIBESEDB_CODEPAGES = 21866;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_874: LIBESEDB_CODEPAGES = 874;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_932: LIBESEDB_CODEPAGES = 932;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_936: LIBESEDB_CODEPAGES = 936;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_949: LIBESEDB_CODEPAGES = 949;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_950: LIBESEDB_CODEPAGES = 950;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_1250: LIBESEDB_CODEPAGES = 1250;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_1251: LIBESEDB_CODEPAGES = 1251;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_1252: LIBESEDB_CODEPAGES = 1252;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_1253: LIBESEDB_CODEPAGES = 1253;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_1254: LIBESEDB_CODEPAGES = 1254;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_1255: LIBESEDB_CODEPAGES = 1255;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_1256: LIBESEDB_CODEPAGES = 1256;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_1257: LIBESEDB_CODEPAGES = 1257;
pub const LIBESEDB_CODEPAGES_LIBESEDB_CODEPAGE_WINDOWS_1258: LIBESEDB_CODEPAGES = 1258;
#[doc = " The codepage definitions"]
pub type LIBESEDB_CODEPAGES = ::std::os::raw::c_int;
pub const LIBESEDB_ACCESS_FLAGS_LIBESEDB_ACCESS_FLAG_READ: LIBESEDB_ACCESS_FLAGS = 1;
#[doc = " Reserved: not supported yet"]
pub const LIBESEDB_ACCESS_FLAGS_LIBESEDB_ACCESS_FLAG_WRITE: LIBESEDB_ACCESS_FLAGS = 2;
#[doc = " The access flags definitions\n bit 1        set to 1 for read access\n bit 2        set to 1 for write access\n bit 3-8      not used"]
pub type LIBESEDB_ACCESS_FLAGS = ::std::os::raw::c_int;
pub const LIBESEDB_FILE_TYPES_LIBESEDB_FILE_TYPE_DATABASE: LIBESEDB_FILE_TYPES = 0;
pub const LIBESEDB_FILE_TYPES_LIBESEDB_FILE_TYPE_STREAMING_FILE: LIBESEDB_FILE_TYPES = 1;
#[doc = " The file types"]
pub type LIBESEDB_FILE_TYPES = ::std::os::raw::c_int;
pub const LIBESEDB_GET_COLUMN_FLAGS_LIBESEDB_GET_COLUMN_FLAG_IGNORE_TEMPLATE_TABLE:
    LIBESEDB_GET_COLUMN_FLAGS = 1;
#[doc = " The get columns flags"]
pub type LIBESEDB_GET_COLUMN_FLAGS = ::std::os::raw::c_int;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_NULL: LIBESEDB_COLUMN_TYPES = 0;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_BOOLEAN: LIBESEDB_COLUMN_TYPES = 1;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_INTEGER_8BIT_UNSIGNED: LIBESEDB_COLUMN_TYPES =
    2;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_INTEGER_16BIT_SIGNED: LIBESEDB_COLUMN_TYPES =
    3;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_INTEGER_32BIT_SIGNED: LIBESEDB_COLUMN_TYPES =
    4;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_CURRENCY: LIBESEDB_COLUMN_TYPES = 5;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_FLOAT_32BIT: LIBESEDB_COLUMN_TYPES = 6;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_DOUBLE_64BIT: LIBESEDB_COLUMN_TYPES = 7;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_DATE_TIME: LIBESEDB_COLUMN_TYPES = 8;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_BINARY_DATA: LIBESEDB_COLUMN_TYPES = 9;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_TEXT: LIBESEDB_COLUMN_TYPES = 10;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_LARGE_BINARY_DATA: LIBESEDB_COLUMN_TYPES = 11;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_LARGE_TEXT: LIBESEDB_COLUMN_TYPES = 12;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_SUPER_LARGE_VALUE: LIBESEDB_COLUMN_TYPES = 13;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_INTEGER_32BIT_UNSIGNED: LIBESEDB_COLUMN_TYPES =
    14;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_INTEGER_64BIT_SIGNED: LIBESEDB_COLUMN_TYPES =
    15;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_GUID: LIBESEDB_COLUMN_TYPES = 16;
pub const LIBESEDB_COLUMN_TYPES_LIBESEDB_COLUMN_TYPE_INTEGER_16BIT_UNSIGNED: LIBESEDB_COLUMN_TYPES =
    17;
#[doc = " The column types"]
pub type LIBESEDB_COLUMN_TYPES = ::std::os::raw::c_int;
pub const LIBESEDB_VALUE_FLAGS_LIBESEDB_VALUE_FLAG_VARIABLE_SIZE: LIBESEDB_VALUE_FLAGS = 1;
pub const LIBESEDB_VALUE_FLAGS_LIBESEDB_VALUE_FLAG_COMPRESSED: LIBESEDB_VALUE_FLAGS = 2;
pub const LIBESEDB_VALUE_FLAGS_LIBESEDB_VALUE_FLAG_LONG_VALUE: LIBESEDB_VALUE_FLAGS = 4;
pub const LIBESEDB_VALUE_FLAGS_LIBESEDB_VALUE_FLAG_MULTI_VALUE: LIBESEDB_VALUE_FLAGS = 8;
#[doc = " The value flags"]
pub type LIBESEDB_VALUE_FLAGS = ::std::os::raw::c_int;
#[doc = " External error type definition hides internal structure"]
pub type libesedb_error_t = isize;
pub const LIBESEDB_ERROR_DOMAINS_LIBESEDB_ERROR_DOMAIN_ARGUMENTS: LIBESEDB_ERROR_DOMAINS = 97;
pub const LIBESEDB_ERROR_DOMAINS_LIBESEDB_ERROR_DOMAIN_CONVERSION: LIBESEDB_ERROR_DOMAINS = 99;
pub const LIBESEDB_ERROR_DOMAINS_LIBESEDB_ERROR_DOMAIN_COMPRESSION: LIBESEDB_ERROR_DOMAINS = 67;
pub const LIBESEDB_ERROR_DOMAINS_LIBESEDB_ERROR_DOMAIN_IO: LIBESEDB_ERROR_DOMAINS = 73;
pub const LIBESEDB_ERROR_DOMAINS_LIBESEDB_ERROR_DOMAIN_INPUT: LIBESEDB_ERROR_DOMAINS = 105;
pub const LIBESEDB_ERROR_DOMAINS_LIBESEDB_ERROR_DOMAIN_MEMORY: LIBESEDB_ERROR_DOMAINS = 109;
pub const LIBESEDB_ERROR_DOMAINS_LIBESEDB_ERROR_DOMAIN_OUTPUT: LIBESEDB_ERROR_DOMAINS = 111;
pub const LIBESEDB_ERROR_DOMAINS_LIBESEDB_ERROR_DOMAIN_RUNTIME: LIBESEDB_ERROR_DOMAINS = 114;
#[doc = " The error domains"]
pub type LIBESEDB_ERROR_DOMAINS = ::std::os::raw::c_int;
pub const LIBESEDB_ARGUMENT_ERROR_LIBESEDB_ARGUMENT_ERROR_GENERIC: LIBESEDB_ARGUMENT_ERROR = 0;
#[doc = " The argument contains an invalid value"]
pub const LIBESEDB_ARGUMENT_ERROR_LIBESEDB_ARGUMENT_ERROR_INVALID_VALUE: LIBESEDB_ARGUMENT_ERROR =
    1;
#[doc = " The argument contains a value less than zero"]
pub const LIBESEDB_ARGUMENT_ERROR_LIBESEDB_ARGUMENT_ERROR_VALUE_LESS_THAN_ZERO:
    LIBESEDB_ARGUMENT_ERROR = 2;
#[doc = " The argument contains a value zero or less"]
pub const LIBESEDB_ARGUMENT_ERROR_LIBESEDB_ARGUMENT_ERROR_VALUE_ZERO_OR_LESS:
    LIBESEDB_ARGUMENT_ERROR = 3;
#[doc = " The argument contains a value that exceeds the maximum\n for the specific type"]
pub const LIBESEDB_ARGUMENT_ERROR_LIBESEDB_ARGUMENT_ERROR_VALUE_EXCEEDS_MAXIMUM:
    LIBESEDB_ARGUMENT_ERROR = 4;
#[doc = " The argument contains a value that is too small"]
pub const LIBESEDB_ARGUMENT_ERROR_LIBESEDB_ARGUMENT_ERROR_VALUE_TOO_SMALL: LIBESEDB_ARGUMENT_ERROR =
    5;
#[doc = " The argument contains a value that is too large"]
pub const LIBESEDB_ARGUMENT_ERROR_LIBESEDB_ARGUMENT_ERROR_VALUE_TOO_LARGE: LIBESEDB_ARGUMENT_ERROR =
    6;
#[doc = " The argument contains a value that is out of bounds"]
pub const LIBESEDB_ARGUMENT_ERROR_LIBESEDB_ARGUMENT_ERROR_VALUE_OUT_OF_BOUNDS:
    LIBESEDB_ARGUMENT_ERROR = 7;
#[doc = " The argument contains a value that is not supported"]
pub const LIBESEDB_ARGUMENT_ERROR_LIBESEDB_ARGUMENT_ERROR_UNSUPPORTED_VALUE:
    LIBESEDB_ARGUMENT_ERROR = 8;
#[doc = " The argument contains a value that conficts with another argument"]
pub const LIBESEDB_ARGUMENT_ERROR_LIBESEDB_ARGUMENT_ERROR_CONFLICTING_VALUE:
    LIBESEDB_ARGUMENT_ERROR = 9;
#[doc = " The argument error codes\n to signify errors regarding arguments passed to a function"]
pub type LIBESEDB_ARGUMENT_ERROR = ::std::os::raw::c_int;
pub const LIBESEDB_CONVERSION_ERROR_LIBESEDB_CONVERSION_ERROR_GENERIC: LIBESEDB_CONVERSION_ERROR =
    0;
#[doc = " The conversion failed on the input"]
pub const LIBESEDB_CONVERSION_ERROR_LIBESEDB_CONVERSION_ERROR_INPUT_FAILED:
    LIBESEDB_CONVERSION_ERROR = 1;
#[doc = " The conversion failed on the output"]
pub const LIBESEDB_CONVERSION_ERROR_LIBESEDB_CONVERSION_ERROR_OUTPUT_FAILED:
    LIBESEDB_CONVERSION_ERROR = 2;
#[doc = " The conversion error codes\n to signify errors regarding conversions"]
pub type LIBESEDB_CONVERSION_ERROR = ::std::os::raw::c_int;
pub const LIBESEDB_COMPRESSION_ERROR_LIBESEDB_COMPRESSION_ERROR_GENERIC:
    LIBESEDB_COMPRESSION_ERROR = 0;
#[doc = " The compression failed"]
pub const LIBESEDB_COMPRESSION_ERROR_LIBESEDB_COMPRESSION_ERROR_COMPRESS_FAILED:
    LIBESEDB_COMPRESSION_ERROR = 1;
#[doc = " The decompression failed"]
pub const LIBESEDB_COMPRESSION_ERROR_LIBESEDB_COMPRESSION_ERROR_DECOMPRESS_FAILED:
    LIBESEDB_COMPRESSION_ERROR = 2;
#[doc = " The compression error codes\n to signify errors regarding compression"]
pub type LIBESEDB_COMPRESSION_ERROR = ::std::os::raw::c_int;
pub const LIBESEDB_IO_ERROR_LIBESEDB_IO_ERROR_GENERIC: LIBESEDB_IO_ERROR = 0;
#[doc = " The open failed"]
pub const LIBESEDB_IO_ERROR_LIBESEDB_IO_ERROR_OPEN_FAILED: LIBESEDB_IO_ERROR = 1;
#[doc = " The close failed"]
pub const LIBESEDB_IO_ERROR_LIBESEDB_IO_ERROR_CLOSE_FAILED: LIBESEDB_IO_ERROR = 2;
#[doc = " The seek failed"]
pub const LIBESEDB_IO_ERROR_LIBESEDB_IO_ERROR_SEEK_FAILED: LIBESEDB_IO_ERROR = 3;
#[doc = " The read failed"]
pub const LIBESEDB_IO_ERROR_LIBESEDB_IO_ERROR_READ_FAILED: LIBESEDB_IO_ERROR = 4;
#[doc = " The write failed"]
pub const LIBESEDB_IO_ERROR_LIBESEDB_IO_ERROR_WRITE_FAILED: LIBESEDB_IO_ERROR = 5;
#[doc = " Access denied"]
pub const LIBESEDB_IO_ERROR_LIBESEDB_IO_ERROR_ACCESS_DENIED: LIBESEDB_IO_ERROR = 6;
#[doc = " The resource is invalid i.e. a missing file"]
pub const LIBESEDB_IO_ERROR_LIBESEDB_IO_ERROR_INVALID_RESOURCE: LIBESEDB_IO_ERROR = 7;
#[doc = " The ioctl failed"]
pub const LIBESEDB_IO_ERROR_LIBESEDB_IO_ERROR_IOCTL_FAILED: LIBESEDB_IO_ERROR = 8;
#[doc = " The unlink failed"]
pub const LIBESEDB_IO_ERROR_LIBESEDB_IO_ERROR_UNLINK_FAILED: LIBESEDB_IO_ERROR = 9;
#[doc = " The input/output error codes\n to signify errors regarding input/output"]
pub type LIBESEDB_IO_ERROR = ::std::os::raw::c_int;
pub const LIBESEDB_INPUT_ERROR_LIBESEDB_INPUT_ERROR_GENERIC: LIBESEDB_INPUT_ERROR = 0;
#[doc = " The input contains invalid data"]
pub const LIBESEDB_INPUT_ERROR_LIBESEDB_INPUT_ERROR_INVALID_DATA: LIBESEDB_INPUT_ERROR = 1;
#[doc = " The input contains an unsupported signature"]
pub const LIBESEDB_INPUT_ERROR_LIBESEDB_INPUT_ERROR_SIGNATURE_MISMATCH: LIBESEDB_INPUT_ERROR = 2;
#[doc = " A checksum in the input did not match"]
pub const LIBESEDB_INPUT_ERROR_LIBESEDB_INPUT_ERROR_CHECKSUM_MISMATCH: LIBESEDB_INPUT_ERROR = 3;
#[doc = " A value in the input did not match a previously\n read value or calculated value"]
pub const LIBESEDB_INPUT_ERROR_LIBESEDB_INPUT_ERROR_VALUE_MISMATCH: LIBESEDB_INPUT_ERROR = 4;
#[doc = " The input error codes\n to signify errors regarding handing input data"]
pub type LIBESEDB_INPUT_ERROR = ::std::os::raw::c_int;
pub const LIBESEDB_MEMORY_ERROR_LIBESEDB_MEMORY_ERROR_GENERIC: LIBESEDB_MEMORY_ERROR = 0;
#[doc = " There is insufficient memory available"]
pub const LIBESEDB_MEMORY_ERROR_LIBESEDB_MEMORY_ERROR_INSUFFICIENT: LIBESEDB_MEMORY_ERROR = 1;
#[doc = " The memory failed to be copied"]
pub const LIBESEDB_MEMORY_ERROR_LIBESEDB_MEMORY_ERROR_COPY_FAILED: LIBESEDB_MEMORY_ERROR = 2;
#[doc = " The memory failed to be set"]
pub const LIBESEDB_MEMORY_ERROR_LIBESEDB_MEMORY_ERROR_SET_FAILED: LIBESEDB_MEMORY_ERROR = 3;
#[doc = " The memory error codes\n to signify errors regarding memory"]
pub type LIBESEDB_MEMORY_ERROR = ::std::os::raw::c_int;
pub const LIBESEDB_OUTPUT_ERROR_LIBESEDB_OUTPUT_ERROR_GENERIC: LIBESEDB_OUTPUT_ERROR = 0;
#[doc = " There is insuficient space to write the output"]
pub const LIBESEDB_OUTPUT_ERROR_LIBESEDB_OUTPUT_ERROR_INSUFFICIENT_SPACE: LIBESEDB_OUTPUT_ERROR = 1;
#[doc = " The output error codes"]
pub type LIBESEDB_OUTPUT_ERROR = ::std::os::raw::c_int;
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_GENERIC: LIBESEDB_RUNTIME_ERROR = 0;
#[doc = " The value is missing"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_VALUE_MISSING: LIBESEDB_RUNTIME_ERROR = 1;
#[doc = " The value was already set"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_VALUE_ALREADY_SET: LIBESEDB_RUNTIME_ERROR =
    2;
#[doc = " The creation and/or initialization of an internal structure failed"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_INITIALIZE_FAILED: LIBESEDB_RUNTIME_ERROR =
    3;
#[doc = " The resize of an internal structure failed"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_RESIZE_FAILED: LIBESEDB_RUNTIME_ERROR = 4;
#[doc = " The free and/or finalization of an internal structure failed"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_FINALIZE_FAILED: LIBESEDB_RUNTIME_ERROR = 5;
#[doc = " The value could not be determined"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_GET_FAILED: LIBESEDB_RUNTIME_ERROR = 6;
#[doc = " The value could not be set"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_SET_FAILED: LIBESEDB_RUNTIME_ERROR = 7;
#[doc = " The value could not be appended/prepended"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_APPEND_FAILED: LIBESEDB_RUNTIME_ERROR = 8;
#[doc = " The value could not be copied"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_COPY_FAILED: LIBESEDB_RUNTIME_ERROR = 9;
#[doc = " The value could not be removed"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_REMOVE_FAILED: LIBESEDB_RUNTIME_ERROR = 10;
#[doc = " The value could not be printed"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_PRINT_FAILED: LIBESEDB_RUNTIME_ERROR = 11;
#[doc = " The value was out of bounds"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS:
    LIBESEDB_RUNTIME_ERROR = 12;
#[doc = " The value exceeds the maximum for its specific type"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_VALUE_EXCEEDS_MAXIMUM:
    LIBESEDB_RUNTIME_ERROR = 13;
#[doc = " The value is unsupported"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_UNSUPPORTED_VALUE: LIBESEDB_RUNTIME_ERROR =
    14;
#[doc = " An abort was requested"]
pub const LIBESEDB_RUNTIME_ERROR_LIBESEDB_RUNTIME_ERROR_ABORT_REQUESTED: LIBESEDB_RUNTIME_ERROR =
    15;
#[doc = " The runtime error codes\n to signify errors regarding runtime processing"]
pub type LIBESEDB_RUNTIME_ERROR = ::std::os::raw::c_int;
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Returns the library version"]
    pub fn libesedb_get_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Returns the access flags for reading"]
    pub fn libesedb_get_access_flags_read() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the narrow system string codepage\n A value of 0 represents no codepage, UTF-8 encoding is used instead\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_get_codepage(
        codepage: *mut ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sets the narrow system string codepage\n A value of 0 represents no codepage, UTF-8 encoding is used instead\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_set_codepage(
        codepage: ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determines if a file contains an ESEDB file signature\n Returns 1 if true, 0 if not or -1 on error"]
    pub fn libesedb_check_file_signature(
        filename: *const ::std::os::raw::c_char,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sets the verbose notification"]
    pub fn libesedb_notify_set_verbose(verbose: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Sets the notification stream\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_notify_set_stream(
        stream: *mut FILE,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Opens the notification stream using a filename\n The stream is opened in append mode\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_notify_stream_open(
        filename: *const ::std::os::raw::c_char,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Closes the notification stream if opened using a filename\n Returns 0 if successful or -1 on error"]
    pub fn libesedb_notify_stream_close(error: *mut *mut libesedb_error_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Frees an error"]
    pub fn libesedb_error_free(error: *mut *mut libesedb_error_t);
}
extern "C" {
    #[doc = " Prints a descriptive string of the error to the stream\n Returns the number of printed characters if successful or -1 on error"]
    pub fn libesedb_error_fprint(
        error: *mut libesedb_error_t,
        stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Prints a descriptive string of the error to the string\n The end-of-string character is not included in the return value\n Returns the number of printed characters if successful or -1 on error"]
    pub fn libesedb_error_sprint(
        error: *mut libesedb_error_t,
        string: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Prints a backtrace of the error to the stream\n Returns the number of printed characters if successful or -1 on error"]
    pub fn libesedb_error_backtrace_fprint(
        error: *mut libesedb_error_t,
        stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Prints a backtrace of the error to the string\n The end-of-string character is not included in the return value\n Returns the number of printed characters if successful or -1 on error"]
    pub fn libesedb_error_backtrace_sprint(
        error: *mut libesedb_error_t,
        string: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Creates a file\n Make sure the value file is referencing, is set to NULL\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_file_initialize(
        file: *mut *mut libesedb_file_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Frees a file\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_file_free(
        file: *mut *mut libesedb_file_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Signals a file to abort its current activity\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_file_signal_abort(
        file: *mut libesedb_file_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Opens a file\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_file_open(
        file: *mut libesedb_file_t,
        filename: *const ::std::os::raw::c_char,
        access_flags: ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Closes a file\n Returns 0 if successful or -1 on error"]
    pub fn libesedb_file_close(
        file: *mut libesedb_file_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the file type\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_file_get_type(
        file: *mut libesedb_file_t,
        type_: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the file (current) format version\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_file_get_format_version(
        file: *mut libesedb_file_t,
        format_version: *mut u32,
        format_revision: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the file creation version\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_file_get_creation_format_version(
        file: *mut libesedb_file_t,
        format_version: *mut u32,
        format_revision: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the file page size\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_file_get_page_size(
        file: *mut libesedb_file_t,
        page_size: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the number of tables\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_file_get_number_of_tables(
        file: *mut libesedb_file_t,
        number_of_tables: *mut ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the table for the specific entry\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_file_get_table(
        file: *mut libesedb_file_t,
        table_entry: ::std::os::raw::c_int,
        table: *mut *mut libesedb_table_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the table for the UTF-8 encoded name\n Returns 1 if successful, 0 if no table could be found or -1 on error"]
    pub fn libesedb_file_get_table_by_utf8_name(
        file: *mut libesedb_file_t,
        utf8_string: *const u8,
        utf8_string_length: usize,
        table: *mut *mut libesedb_table_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the table for the UTF-16 encoded name\n Returns 1 if successful, 0 if no table could be found or -1 on error"]
    pub fn libesedb_file_get_table_by_utf16_name(
        file: *mut libesedb_file_t,
        utf16_string: *const u16,
        utf16_string_length: usize,
        table: *mut *mut libesedb_table_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Frees a table\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_free(
        table: *mut *mut libesedb_table_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the table identifier or Father Data Page (FDP) object identifier\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_identifier(
        table: *mut libesedb_table_t,
        identifier: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-8 encoded string of the table name\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_utf8_name_size(
        table: *mut libesedb_table_t,
        utf8_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-8 encoded string of the table name\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_utf8_name(
        table: *mut libesedb_table_t,
        utf8_string: *mut u8,
        utf8_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-16 encoded string of the table name\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_utf16_name_size(
        table: *mut libesedb_table_t,
        utf16_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-16 encoded string of the table name\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_utf16_name(
        table: *mut libesedb_table_t,
        utf16_string: *mut u16,
        utf16_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-8 encoded string of the template name\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_utf8_template_name_size(
        table: *mut libesedb_table_t,
        utf8_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-8 encoded string of the template name\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_utf8_template_name(
        table: *mut libesedb_table_t,
        utf8_string: *mut u8,
        utf8_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-16 encoded string of the template name\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_utf16_template_name_size(
        table: *mut libesedb_table_t,
        utf16_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-16 encoded string of the template name\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_utf16_template_name(
        table: *mut libesedb_table_t,
        utf16_string: *mut u16,
        utf16_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the number of columns in the table\n\n Use the flag LIBESEDB_GET_COLUMN_FLAG_IGNORE_TEMPLATE_TABLE to retrieve the number of columns\n ignoring the template table\n\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_number_of_columns(
        table: *mut libesedb_table_t,
        number_of_columns: *mut ::std::os::raw::c_int,
        flags: u8,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the column for the specific entry\n\n Use the flag LIBESEDB_GET_COLUMN_FLAG_IGNORE_TEMPLATE_TABLE to retrieve the column\n ignoring the template table\n\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_column(
        table: *mut libesedb_table_t,
        column_entry: ::std::os::raw::c_int,
        column: *mut *mut libesedb_column_t,
        flags: u8,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the number of indexes\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_number_of_indexes(
        table: *mut libesedb_table_t,
        number_of_indexes: *mut ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the index for the specific entry\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_index(
        table: *mut libesedb_table_t,
        index_entry: ::std::os::raw::c_int,
        index: *mut *mut libesedb_index_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the number of records in the table\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_number_of_records(
        table: *mut libesedb_table_t,
        number_of_records: *mut ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the record for the specific entry\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_table_get_record(
        table: *mut libesedb_table_t,
        record_entry: ::std::os::raw::c_int,
        record: *mut *mut libesedb_record_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Frees a column\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_column_free(
        column: *mut *mut libesedb_column_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the column identifier\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_column_get_identifier(
        column: *mut libesedb_column_t,
        identifier: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the column type\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_column_get_type(
        column: *mut libesedb_column_t,
        type_: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-8 encoded string of the column name\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_column_get_utf8_name_size(
        column: *mut libesedb_column_t,
        utf8_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-8 encoded string of the column name\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_column_get_utf8_name(
        column: *mut libesedb_column_t,
        utf8_string: *mut u8,
        utf8_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-16 encoded string of the column name\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_column_get_utf16_name_size(
        column: *mut libesedb_column_t,
        utf16_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-16 encoded string of the column name\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_column_get_utf16_name(
        column: *mut libesedb_column_t,
        utf16_string: *mut u16,
        utf16_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Frees a index\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_index_free(
        index: *mut *mut libesedb_index_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the index identifier or Father Data Page (FDP) object identifier\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_index_get_identifier(
        index: *mut libesedb_index_t,
        identifier: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-8 encoded string of the index name\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_index_get_utf8_name_size(
        index: *mut libesedb_index_t,
        utf8_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-8 encoded string of the index name\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_index_get_utf8_name(
        index: *mut libesedb_index_t,
        utf8_string: *mut u8,
        utf8_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-16 encoded string of the index name\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_index_get_utf16_name_size(
        index: *mut libesedb_index_t,
        utf16_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-16 encoded string of the index name\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_index_get_utf16_name(
        index: *mut libesedb_index_t,
        utf16_string: *mut u16,
        utf16_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the number of records in the index\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_index_get_number_of_records(
        index: *mut libesedb_index_t,
        number_of_records: *mut ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the record for the specific entry\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_index_get_record(
        index: *mut libesedb_index_t,
        record_entry: ::std::os::raw::c_int,
        record: *mut *mut libesedb_record_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Frees a record\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_record_free(
        record: *mut *mut libesedb_record_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the number of values in the record\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_record_get_number_of_values(
        record: *mut libesedb_record_t,
        number_of_values: *mut ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the column identifier of the specific entry\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_record_get_column_identifier(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        column_identifier: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the column type of the specific entry\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_record_get_column_type(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        column_type: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-8 encoded string of the column name of the specific entry\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_record_get_utf8_column_name_size(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        utf8_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-8 encoded string of the column name of the specific entry\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_record_get_utf8_column_name(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        utf8_string: *mut u8,
        utf8_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-16 encoded string of the column name of the specific entry\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_record_get_utf16_column_name_size(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        utf16_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-16 encoded string of the column name of the specific entry\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_record_get_utf16_column_name(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        utf16_string: *mut u16,
        utf16_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the value data size of the specific entry\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_record_get_value_data_size(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_data_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the value data of the specific entry\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_record_get_value_data(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_data: *mut u8,
        value_data_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the value data flags of the specific entry\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_record_get_value_data_flags(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_data_flags: *mut u8,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the boolean value of a specific entry\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_boolean(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_boolean: *mut u8,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 8-bit value of a specific entry\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_8bit(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_8bit: *mut u8,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 16-bit value of a specific entry\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_16bit(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_16bit: *mut u16,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 32-bit value of a specific entry\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_32bit(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_32bit: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 64-bit value of a specific entry\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_64bit(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_64bit: *mut u64,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 64-bit filetime value of a specific entry\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_filetime(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_filetime: *mut u64,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the single precision floating point value of a specific entry\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_floating_point_32bit(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_floating_point_32bit: *mut f32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the double precision floating point value of a specific entry\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_floating_point_64bit(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_floating_point_64bit: *mut f64,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of an UTF-8 encoded string a specific entry\n The returned size includes the end of string character\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_utf8_string_size(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        utf8_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-8 encoded string of a specific entry\n The function uses the codepage in the column definition if necessary\n The size should include the end of string character\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_utf8_string(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        utf8_string: *mut u8,
        utf8_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of an UTF-16 encoded string a specific entry\n The returned size includes the end of string character\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_utf16_string_size(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        utf16_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-16 encoded string of a specific entry\n The function uses the codepage in the column definition if necessary\n The size should include the end of string character\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_utf16_string(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        utf16_string: *mut u16,
        utf16_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the binary data size of a specific entry\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_binary_data_size(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        binary_data_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the binary data value of a specific entry\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_record_get_value_binary_data(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        binary_data: *mut u8,
        binary_data_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determines if a specific entry is a long value\n Returns 1 if true, 0 if not or -1 on error"]
    pub fn libesedb_record_is_long_value(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determines if a specific entry is a multi value\n Returns 1 if true, 0 if not or -1 on error"]
    pub fn libesedb_record_is_multi_value(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the long value of a specific entry\n Creates a new long value\n Returns 1 if successful, 0 if the item does not contain such value or -1 on error"]
    pub fn libesedb_record_get_long_value(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        long_value: *mut *mut libesedb_long_value_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the multi value of a specific entry\n Creates a new multi value\n Returns 1 if successful, 0 if the item does not contain such value or -1 on error"]
    pub fn libesedb_record_get_multi_value(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        multi_value: *mut *mut libesedb_multi_value_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the value of the specific entry\n Returns 1 if successful or -1 on error\n\n This function is deprecated use the libesedb_record_get_value_data functions instead."]
    pub fn libesedb_record_get_value(
        record: *mut libesedb_record_t,
        value_entry: ::std::os::raw::c_int,
        value_data: *mut *mut u8,
        value_data_size: *mut usize,
        value_flags: *mut u8,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Frees a long value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_long_value_free(
        long_value: *mut *mut libesedb_long_value_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieve the data size\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_long_value_get_data_size(
        long_value: *mut libesedb_long_value_t,
        data_size: *mut size64_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieve the data\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_long_value_get_data(
        long_value: *mut libesedb_long_value_t,
        data: *mut u8,
        data_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieve the number of data segments\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_long_value_get_number_of_data_segments(
        long_value: *mut libesedb_long_value_t,
        number_of_data_segments: *mut ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieve the data segment size\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_long_value_get_data_segment_size(
        long_value: *mut libesedb_long_value_t,
        data_segment_index: ::std::os::raw::c_int,
        data_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieve the data segment\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_long_value_get_data_segment(
        long_value: *mut libesedb_long_value_t,
        data_segment_index: ::std::os::raw::c_int,
        data_segment: *mut u8,
        data_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the data as an UTF-8 encoded string\n The returned size includes the end of string character\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_long_value_get_utf8_string_size(
        long_value: *mut libesedb_long_value_t,
        utf8_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the data as an UTF-8 encoded string\n The function uses the codepage in the column definition if necessary\n The size should include the end of string character\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_long_value_get_utf8_string(
        long_value: *mut libesedb_long_value_t,
        utf8_string: *mut u8,
        utf8_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the data as an UTF-16 encoded string\n The returned size includes the end of string character\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_long_value_get_utf16_string_size(
        long_value: *mut libesedb_long_value_t,
        utf16_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the data as an UTF-16 encoded string\n The function uses the codepage in the column definition if necessary\n The size should include the end of string character\n Returns 1 if successful, 0 if value is NULL or -1 on error"]
    pub fn libesedb_long_value_get_utf16_string(
        long_value: *mut libesedb_long_value_t,
        utf16_string: *mut u16,
        utf16_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Frees a multi value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_free(
        multi_value: *mut *mut libesedb_multi_value_t,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the column type\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_column_type(
        multi_value: *mut libesedb_multi_value_t,
        column_type: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the number of values in a multi value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_number_of_values(
        multi_value: *mut libesedb_multi_value_t,
        number_of_values: *mut ::std::os::raw::c_int,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the value data size of the specific value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_data_size(
        multi_value: *mut libesedb_multi_value_t,
        value_entry: ::std::os::raw::c_int,
        value_data_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the value data of the specific value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_data(
        multi_value: *mut libesedb_multi_value_t,
        value_entry: ::std::os::raw::c_int,
        value_data: *mut u8,
        value_data_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 8-bit value of a specific value of the multi value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_8bit(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        value_8bit: *mut u8,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 16-bit value of a specific value of the multi value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_16bit(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        value_16bit: *mut u16,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 32-bit value of a specific value of the multi value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_32bit(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        value_32bit: *mut u32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 64-bit value of a specific value of the multi value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_64bit(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        value_64bit: *mut u64,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 32-bit floating point value of a specific value of the multi value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_floating_point_32bit(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        value_32bit: *mut f32,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 64-bit floating point value of a specific value of the multi value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_floating_point_64bit(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        value_64bit: *mut f64,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the 64-bit filetime value of a specific value of the multi value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_filetime(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        value_filetime: *mut u64,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-8 encoded string of a specific value of the multi value\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_utf8_string_size(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        utf8_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-8 encoded string value of a specific value of the multi value\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_utf8_string(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        utf8_string: *mut u8,
        utf8_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of the UTF-16 encoded string of a specific value of the multi value\n The returned size includes the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_utf16_string_size(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        utf16_string_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the UTF-16 encoded string value of a specific value of the multi value\n The size should include the end of string character\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_utf16_string(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        utf16_string: *mut u16,
        utf16_string_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the size of a binary data value of a specific value of the multi value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_binary_data_size(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        binary_data_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves the binary data value of a specific value of the multi value\n Returns 1 if successful or -1 on error"]
    pub fn libesedb_multi_value_get_value_binary_data(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        binary_data: *mut u8,
        binary_data_size: usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieves a specific value of the multi value\n Returns 1 if successful or -1 on error\n\n This function is deprecated use the libesedb_multi_value_get_value_data functions instead."]
    pub fn libesedb_multi_value_get_value(
        multi_value: *mut libesedb_multi_value_t,
        multi_value_index: ::std::os::raw::c_int,
        value_type: *mut u32,
        value_data: *mut *mut u8,
        value_data_size: *mut usize,
        error: *mut *mut libesedb_error_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
